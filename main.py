import datetime
import random

import requests
import database
from telebot.storage import StateMemoryStorage
import settings
import telebot
import models
from telebot import types
from loguru import logger
from telebot.types import Message, Dict, CallbackQuery, InputMediaPhoto
from settings import BOT_TOKEN, DEFAULT_COMMANDS
from telebot.custom_filters import StateFilter
from telebot.types import BotCommand
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

storage = StateMemoryStorage()
bot = telebot.TeleBot(token=BOT_TOKEN, state_storage=storage)

# logger.remove(handler_id=None)  # –æ—Ç–º–µ–Ω–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
logger.add("runtime.log")  # —Å–æ–∑–¥–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logger.info('–ù–∞—á–∞–ª–æ –∂—É—Ä–Ω–∞–ª–∞')

headers = {
    "content-type": "application/json",
    "X-RapidAPI-Key": settings.RAPID_API_KEY,
    "X-RapidAPI-Host": "hotels4.p.rapidapi.com",
}


def set_default_commands(bot):
    bot.set_my_commands(
        [BotCommand(*i) for i in DEFAULT_COMMANDS]
    )


@bot.message_handler(commands=['start'])
@logger.catch
def bot_start(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'start'. –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
    """

    bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n"
                                      f"–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥—É!\n")


@bot.message_handler(commands=['help'])  # +
def bot_help(message: Message):
    text = [f'/{command} - {desk}' for command, desk in DEFAULT_COMMANDS]
    bot.reply_to(message, '\n'.join(text))


@bot.message_handler(commands=['history'])
def history(message: Message) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /history
        –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–¥–∞–µ—Ç –≤ —á–∞—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ø–æ –æ—Ç–µ–ª—è–º.
        : param message : Message
        : return : None
    """
    logger.info('–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ history!')
    queries = database.read_query(message.chat.id)
    logger.info(f'–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã query:\n {queries}')
    for item in queries:
        bot.send_message(message.chat.id, f"({item[0]}). –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {item[1]}. –í—ã –≤–≤–æ–¥–∏–ª–∏ –≥–æ—Ä–æ–¥: {item[2]}")
    bot.set_state(message.chat.id, models.UserInputState.history_select)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞: ")


@bot.message_handler(state=models.UserInputState.history_select)
def input_city(message: Message) -> None:
    """
        –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç
        –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç "–Ω–µ —Ü–∏—Ñ—Ä—ã", —Ç–æ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
        –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω—ã—Ö –Ω–∞–º –∑–∞–ø–∏—Å–µ–π. –í—ã–¥–∞—á–∞ –≤ —á–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        : param message : Message
        : return : None
    """
    if message.text.isdigit():
        queries = database.read_query(message.chat.id)
        number_query = []
        photo_need = ''
        for item in queries:
            number_query.append(item[0])
            if int(message.text) == item[0] and item[3] == 'yes':
                photo_need = 'yes'

        if photo_need != 'yes':
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç "–±–µ–∑ —Ñ–æ—Ç–æ"')

        if int(message.text) in number_query:
            history_dict = database.get_history_response(message.text)
            logger.info('–í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
            for hotel in history_dict.items():
                medias = []
                caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotel[1]['name']}]\n –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotel[1]['address']}" \
                          f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ " \
                          f"—Å—É—Ç–∫–∏ $: {hotel[1]['price']}\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {hotel[1]['distance']}"
                urls = hotel[1]['images']
                if photo_need == 'yes':
                    for number, url in enumerate(urls):
                        if number == 0:
                            medias.append(InputMediaPhoto(media=url, caption=caption))
                        else:
                            medias.append(InputMediaPhoto(media=url))
                    bot.send_media_group(message.chat.id, medias)
                else:
                    bot.send_message(message.chat.id, caption)
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@bot.message_handler(commands=['simple_history'])  # +
def bot_history(message: Message):
    logger.info('–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ simple_history!')
    with open('log.txt', 'r') as log:
        text = [f'{string}' for string in log.readlines()]
    bot.reply_to(message, '\n'.join(text))


@bot.message_handler(commands=["lowprice", "highprice", "bestdeal"])  # +
def common_handler(message: Message):
    bot.set_state(message.chat.id, models.UserInputState.command)  # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user
    with bot.retrieve_data(message.chat.id) as data:
        data.clear()
        logger.info(f'{datetime.datetime.now()} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å:' + message.text)
        data['command'] = message.text
        data['sort'] = check_command(message.text)
        data['date_time'] = datetime.datetime.now().strftime('%D.%M.%Y. %H:%M:%S')
        data['chat_id'] = message.chat.id
    database.add_user(message.chat.id, message.from_user.username, message.from_user.full_name)
    bot.set_state(message.chat.id, models.UserInputState.input_city)
    bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å?')


@bot.message_handler(state=models.UserInputState.input_city)  # +
def input_city(message: Message):
    with bot.retrieve_data(message.chat.id) as data:
        data['input_city'] = message.text
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ ' + message.text)
        url = "https://hotels4.p.rapidapi.com/locations/v3/search"
        querystring = {"q": message.text, "locale": "en_US"}
        response_cities = settings.gen_request('GET', url, querystring)
        if response_cities.status_code == 200:
            logger.info('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: 200')
            possible_cities = models.get_city(response_cities.text)
            models.show_cities_buttons(message, possible_cities)
        else:
            logger.info('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞ ' + message.text)
            bot.send_message(message.chat.id, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ–¥ –æ—à–∏–±–∫–∏: {response_cities.status_code}")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑")
            data.clear()


def show_cities(message: Message, possible_cities: Dict):  # +
    logger.info('–í—ã–≤–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    keyboards_cities = types.InlineKeyboardMarkup()
    for key, values in possible_cities.items():
        keyboards_cities.add(types.InlineKeyboardButton(text=values["region"], callback_data=values["gaiaID"]))
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=keyboards_cities)


@bot.callback_query_handler(func=lambda call: call.data.isdigit())  # +
def destination_id_callback(call: CallbackQuery):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {call.message.chat.id}')
    if call.data:
        bot.set_state(call.message.chat.id, models.UserInputState.destinationId)
        with bot.retrieve_data(call.message.chat.id) as data:
            data['destination_id'] = call.data
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.set_state(call.message.chat.id, models.UserInputState.quantity_hotels)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')


@bot.message_handler(state=models.UserInputState.quantity_hotels)  # +
def input_quantity(message: Message):
    if message.text.isdigit():
        if 0 < int(message.text) <= 25:
            logger.info('–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π: ' + message.text)
            with bot.retrieve_data(message.chat.id) as data:
                data['quantity_hotels'] = message.text
            bot.set_state(message.chat.id, models.UserInputState.priceMin)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê:')
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 25! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@bot.message_handler(state=models.UserInputState.priceMin)  # +
def input_price_min(message: Message):
    if message.text.isdigit():
        logger.info('–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è: ' + message.text)
        with bot.retrieve_data(message.chat.id) as data:
            data['price_min'] = message.text
        bot.set_state(message.chat.id, models.UserInputState.priceMax)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê:')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@bot.message_handler(state=models.UserInputState.priceMax)
def input_price_max(message: Message):
    if message.text.isdigit():
        logger.info('–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å price_min: ' + message.text)
        with bot.retrieve_data(message.chat.id) as data:
            if int(data['price_min']) < int(message.text):
                data['price_max'] = message.text
            else:
                bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')

    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')

    calendar, step = DetailedTelegramCalendar(calendar_id=1, min_date=datetime.date.today()).build()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è {LSTEP[step]}", reply_markup=calendar)
    bot.set_state(message.chat.id, models.UserInputState.checkInDate)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1), state=models.UserInputState.checkInDate)
def check_in(call: CallbackQuery) -> None:
    result, key, step = DetailedTelegramCalendar(
        calendar_id=1,
        locale='ru',
        min_date=datetime.date.today()).process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        bot.set_state(call.message.chat.id, models.UserInputState.checkInDate)
        with bot.retrieve_data(call.message.chat.id) as data:
            data['checkInDate'] = result
        bot.send_message(call.message.chat.id, f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å: {result}")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        calendar, step = DetailedTelegramCalendar(calendar_id=2, min_date=datetime.date.today()).build()
        bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è {LSTEP[step]}", reply_markup=calendar)
        bot.set_state(call.message.chat.id, models.UserInputState.checkOutDate)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2), state=models.UserInputState.checkOutDate)
def check_out(call: CallbackQuery) -> None:
    result, key, step = DetailedTelegramCalendar(
        calendar_id=2,
        locale='ru',
        min_date=datetime.date.today()).process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        bot.send_message(call.message.chat.id, f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è: {result}")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        with bot.retrieve_data(call.message.chat.id) as data:
            data['checkOutDate'] = result
        bot.set_state(call.message.chat.id, state=models.UserInputState.num_of_adult)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö:")


@bot.message_handler(state=models.UserInputState.num_of_adult)  # +
def num_of_adult(message: Message) -> None:
    logger.info('–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—Ä–æ—Å–ª—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ' + message.text)
    if message.text.isdigit():
        with bot.retrieve_data(message.chat.id) as data:
            data['num_of_adult'] = int(message.text)
        models.show_buttons_photo_need_yes_no(message)
        # bot.set_state(message.chat.id, models.UserInputState.landmarkIn)
        # bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–≤ –º–∏–ª—è—Ö).')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@bot.callback_query_handler(func=lambda call: call.data.isalpha())
def need_photo_callback(call: CallbackQuery) -> None:
    if call.data == 'yes':
        logger.info('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–ê"')
        with bot.retrieve_data(call.message.chat.id) as data:
            data['photo_need'] = call.data
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.set_state(call.message.chat.id, models.UserInputState.photo_count)
        bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π? –û—Ç 1 –¥–æ 10!')
    elif call.data == 'no':
        logger.info('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–ï–¢"')
        with bot.retrieve_data(call.message.chat.id) as data:
            data['photo_need'] = call.data
            data['photo_count'] = '0'


@bot.message_handler(state=models.UserInputState.photo_count)
def input_photo_quantity(message: Message) -> None:
    if message.text.isdigit():
        if 0 < int(message.text) <= 10:
            logger.info('–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ' + message.text)
            with bot.retrieve_data(message.chat.id) as data:
                data['photo_count'] = message.text
            bot.set_state(message.chat.id, models.UserInputState.landmarkIn)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–≤ –º–∏–ª—è—Ö).')
        else:
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')



@bot.message_handler(state=models.UserInputState.landmarkIn)  # +
def input_landmark_in(message: Message):
    if message.text.isdigit():
        with bot.retrieve_data(message.chat.id) as data:
            data['landmark_in'] = message.text
            bot.set_state(message.chat.id, models.UserInputState.landmarkIn)
        bot.set_state(message.chat.id, models.UserInputState.landmarkOut)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–≤ –º–∏–ª—è—Ö).')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@bot.message_handler(state=models.UserInputState.landmarkOut)  # +
def input_landmark_out(message: Message):
    if message.text.isdigit():
        with bot.retrieve_data(message.chat.id) as data:
            data['landmark_out'] = message.text
            print_data(message, data)
            find_and_show_hotels(message, data)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


def print_data(message: Message, data: Dict):  # +
    logger.info('–í—ã–≤–æ–¥ —Å—É–º–º–∞—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
    database.add_query(data)
    text_message = ('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n'
                    f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {data["date_time"]}\n'
                    f'–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {data["command"]}\n'
                    f'–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥: {data["input_city"]}\n'
                    f'–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ —Å id: {data["destination_id"]}\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π: {data["quantity_hotels"]}\n'
                    f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ü–µ–Ω–Ω–∏–∫: {data["price_min"]}\n'
                    f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ü–µ–Ω–Ω–∏–∫: {data["price_max"]}\n'
                    f'–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {data["checkInDate"]}\n'
                    f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {data["checkOutDate"]}\n')
    with open('log.txt', 'a', encoding='utf-8') as log:
        log.write(text_message + '\n')
    if data['sort'] == 'DISTANCE':
        bot.send_message(message.chat.id, text_message +
                         f'–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {data["landmark_in"]}\n'
                         f'–ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {data["landmark_out"]}')
    else:
        bot.send_message(message.chat.id, text_message)


def find_and_show_hotels(message: Message, data: Dict) -> None:
    url = "https://hotels4.p.rapidapi.com/properties/v2/list"
    payload = {
        "currency": "USD",
        "eapid": 1,
        "locale": "en_US",
        "siteId": 300000001,
        "destination": {"regionId": data['destination_id']},
        "checkInDate": {
            'day': int(data['checkInDate'].day),
            'month': int(data['checkInDate'].month),
            'year': int(data['checkInDate'].year),
        },
        "checkOutDate": {
            'day': int(data['checkOutDate'].day),
            'month': int(data['checkOutDate'].month),
            'year': int(data['checkOutDate'].year),
        },
        "rooms": [
            {
                "adults": int(data['num_of_adult']),
                "children": [{"age": 5}, {"age": 7}]
            }
        ],
        "resultsStartingIndex": 0,
        "resultsSize": 30,
        "sort": data['sort'],
        "filters": {"price": {
            "max": int(data['price_max']),
            "min": int(data['price_min'])
        }}
    }
    response_hotels = requests.post(url, json=payload, headers=headers)
    logger.info(f'–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç {response_hotels.status_code}')
    if response_hotels.status_code == 200:
        hotels = models.get_hotels(response_hotels.text, data['command'], data["landmark_in"], data["landmark_out"])
        if 'error' in hotels:
            bot.send_message(message.chat.id, hotels['error'])
            bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')

        count = 0
        for hotel in hotels.values():
            if count < int(data['quantity_hotels']):
                count += 1
                summary_payload = {
                    "currency": "USD",
                    "eapid": 1,
                    "locale": "en_US",
                    "siteId": 300000001,
                    "propertyId": str(hotel['id'])
                }
                summary_url = "https://hotels4.p.rapidapi.com/properties/v2/detail"
                get_summary = settings.gen_request('POST', summary_url, summary_payload)
                logger.info(f'–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç {get_summary.status_code}')
                if get_summary.status_code == 200:
                    summary_info = models.hotel_info(get_summary.text)

                    caption = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {hotel["name"]}\n ' \
                              f'–ê–¥—Ä–µ—Å: {summary_info["address"]}\n' \
                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ —Å—É—Ç–∫–∏: {round(hotel["price"], 2)}\n ' \
                              f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {round(hotel["distance"], 2)} mile.\n'
                    medias = []
                    links_to_images = []
                    # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏–±–æ —Ñ–æ—Ç–æ–∫ –º–Ω–æ–≥–æ, –∞ –Ω–∞–¥–æ —Ç–æ–ª—å–∫–æ 10
                    try:
                        for random_url in range(int(data['photo_count'])):
                            links_to_images.append(summary_info['images']
                                                   [random.randint(0, len(summary_info['images']) - 1)])
                    except IndexError:
                        continue

                    # –ù–µ –≤–∞–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é
                    # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    data_to_db = {hotel['id']: {'name': hotel['name'], 'address': summary_info['address'],
                                                'price': hotel['price'], 'distance': round(hotel["distance"], 2),
                                                'date_time': data['date_time'], 'images': links_to_images}}
                    database.add_response(data_to_db)
                    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π > 0: —Å–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–∫–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏–º –µ–µ –≤ —á–∞—Ç
                    if int(data['photo_count']) > 0:
                        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º MediaGroup —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–µ–ª—è –∏ –ø–æ—Å—ã–ª–∞–µ–º –≤ —á–∞—Ç
                        for number, url in enumerate(links_to_images):
                            if number == 0:
                                medias.append(InputMediaPhoto(media=url, caption=caption))
                            else:
                                medias.append(InputMediaPhoto(media=url))
                        logger.info("–í—ã–¥–∞—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç")
                        bot.send_media_group(message.chat.id, medias)
                    else:
                        # –µ—Å–ª–∏ —Ñ–æ—Ç–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–µ–ª–µ
                        logger.info("–í—ã–¥–∞—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç")
                        bot.send_message(message.chat.id, caption)
                else:
                    bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ–¥ –æ—à–∏–±–∫–∏: {get_summary.status_code}')
            else:
                break
    else:
        bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ–¥ –æ—à–∏–±–∫–∏: {response_hotels.status_code}')
    bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –æ–∫–æ–Ω—á–µ–Ω!')


def check_command(command: str):
    if command == '/bestdeal':
        return 'DISTANCE'
    elif command == '/lowprice' or command == '/highprice':
        return 'PRICE_LOW_TO_HIGH'



if __name__ == '__main__':
    bot.add_custom_filter(StateFilter(bot))
    set_default_commands(bot)
    bot.infinity_polling()
